# This is a basic workflow to help understand github actions to deploy snowflake DDL on commit to main branch

name: Snowcones Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "Development", "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# This workflow contains a jobs for deploying to DEV, PROD
jobs:
  dev-deployment:
    name: Deploying to Development Environment
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Development
    if: github.event.ref == 'refs/heads/Development'
    # Snowflake creds from github secrets for the production env
    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT : ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ vars.SNOWFLAKE_DOMAINS_DB }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Including SQL linter to validate code  
      - name: Installing Python
        uses: "actions/setup-python@v2"
        with:
            python-version: "3.8"
            
      - name: Install SQLFluff
        run: "pip install sqlfluff==0.3.6"
        
      - name: Lint scripts
        run: "sqlfluff lint PROD_US_DOMAINS"
        
      # Install Snowflake CLI GitHub Action and point to config file
      - name: Development connection
        uses: Snowflake-Labs/snowflake-cli-action@v1
        with:
          cli-version: "latest"
          default-config-file-path: "config.toml"

      # Use the CLI
      - name: Connection details
        run: |
          snow --version
          snow connection test
          
      # Update Snowflake's copy of the repository
      - name: Fetch repository changes
        run: snow git fetch "${{vars.SNOWFLAKE_DOMAINS_GIT_STG}}"
        
      # list the files in folder
      - name: List the files in folder
        run: snow git list-files "@${{vars.SNOWFLAKE_DOMAINS_GIT_STG}}/branches/Development/"

      # Deploy pipeline later we can make it branch specific in v2     
      - name: Deploy Objects to Snowflake Development environment
        run: snow git execute "@snowcones_devops_poc.poc.git_repo_stg/branches/main/deployment.sql" -D "database = '${{ vars.SNOWFLAKE_DOMAINS_DB }}'" -D "schema_name = '${{ vars.SNOWFLAKE_DOMAINS_SCHEMA }}'" -D "stage_name = '${{ vars.SNOWFLAKE_BRANCH }}'"
        
  prod-deployment:
    name: Deploying to Production Environment
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Production
    if: github.event.ref == 'refs/heads/main'
    #needs: [dev-deployment]
    # Snowflake creds from github secrets for the production env
    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT : ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ vars.SNOWFLAKE_DOMAINS_DB }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Install Snowflake CLI GitHub Action and point to config file
      - name: Production connection
        uses: Snowflake-Labs/snowflake-cli-action@v1
        with:
          cli-version: "latest"
          default-config-file-path: "config.toml"

      # Use the CLI
      - name: Connection details
        run: |
          snow --version
          snow connection test
          
      # Update Snowflake's copy of the repository
      - name: Fetch repository changes
        run: snow git fetch "${{vars.SNOWFLAKE_DOMAINS_GIT_STG}}"
        
      # list the files in folder
      - name: List the files in folder
        run: snow git list-files "@${{vars.SNOWFLAKE_DOMAINS_GIT_STG}}/branches/main/"

      # Deploy pipeline later we can make it branch specific in v2     
      - name: Deploy file to main branch
        run: snow git execute "@${{vars.SNOWFLAKE_DOMAINS_GIT_STG}}/branches/main/deployment.sql" -D "database = '${{ vars.SNOWFLAKE_DOMAINS_DB }}'" -D "schema_name = '${{ vars.SNOWFLAKE_DOMAINS_SCHEMA }}'" -D "stage_name = '${{ vars.SNOWFLAKE_BRANCH }}'"
